# BOF
name: Default
on:
  workflow_dispatch:
    inputs:
      commitChanges:
        description: 'True to commit changes'
        required: true 
        type: boolean 
        default: false
  push:
  pull_request:
jobs:
  # --------------------------------------------
  build:
    name: Artifact build
    strategy:
      matrix:
        operatingSystem: [ubuntu-22.04]
        nodeVersion: [16]
      fail-fast: false
    runs-on: ${{ matrix.operatingSystem }}
    # 
    steps:
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.nodeVersion }}
    - uses: actions/checkout@v3
    - name: Detach HEAD
      run: |
         git checkout --detach 
         echo "--------------------------------------------"
         git status
         echo "--------------------------------------------"
    - name: Install dependencies
      run: |
        cd node
        npm install
    - name: Compile
      run: |
        cd node
        npm run build
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.event.repository.name }}-build-node
        if-no-files-found: error 
        path: |
          node/dist/
          node/package-lock.json
          README.md
          action.yml
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.event.repository.name }}-build-tests
        if-no-files-found: error 
        path: |
          tests/
  # --------------------------------------------
  test:
    name: Artifact Test
    strategy:
      matrix:
        operatingSystem: [ubuntu-22.04, windows-2022]
        nodeVersion: [12, 16]
      fail-fast: false
    runs-on: ${{ matrix.operatingSystem }}
    needs: [build]
    #
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-build-node
      - uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-build-tests
          path: |
            tests/
      - name: Debug
        if: ${{ runner.os != 'Windows' }}
        run: |
          ls -lR
      - name: Debug
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: |
          Set-Location -Path ./
          Get-ChildItem -Recurse
      - name: Old version
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: tests/terraform/oldVersion
          terraformFmtType: 'none'
          terraformValidate: 'false'
      - name: Invalid version
        continue-on-error: true
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: tests/terraform/invalidVersion
          terraformFmtType: 'none'
          terraformValidate: 'false'
      - name: Invalid version use latest
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: tests/terraform/invalidVersion
          terraformFmtType: 'none'
          versionInvalidHandling: 'latest'
          terraformValidate: 'false'
      - name: Invalid version latest string
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: tests/terraform/invalidVersionLatest
          terraformFmtType: 'none'
          versionInvalidHandling: 'latest'
          terraformValidate: 'false'
      - name: Invalid config directory
        continue-on-error: true
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: ''
          terraformFmtType: 'check'
          terraformValidate: 'false'
      - name: Check valid format
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: tests/terraform/validFormat
          terraformFmtType: 'check'
          terraformValidate: 'false'
      - name: Check invalid format
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: tests/terraform/invalidFormat
          terraformFmtType: 'check'
          terraformValidate: 'false'
      - name: Write valid format
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: tests/terraform/validFormat
          terraformFmtType: 'write'
          terraformValidate: 'false'
      - name: Write invalid format
        if: ${{ inputs.commitChanges }} 
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: tests/terraform/invalidFormat
          terraformFmtType: 'write'
          terraformValidate: 'false'
      - name: Strict invalid format
        continue-on-error: true
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: tests/terraform/invalidFormat
          terraformFmtType: 'strict'
          terraformValidate: 'false'
      - name: Valid configuration code
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: 'tests/terraform/validConfig'
          terraformFmtType: 'none'
      - name: Invalid init configuration code
        continue-on-error: true
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: 'tests/terraform/invalidConfigInit'
          terraformFmtType: 'none'
      - name: Invalid resource configuration code
        continue-on-error: true
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: 'tests/terraform/invalidResource'
          terraformFmtType: 'none'
      - name: Valid providers configuration code
        uses: ./
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: 'tests/terraform/validProviders'
      - name: Valid backend cloud
        uses: ./
        env:
          TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
        with:
          apiToken: ${{ secrets.GITHUB_TOKEN }}
          configDirectory: 'tests/terraform/validBackendCloud'
    
# EOF